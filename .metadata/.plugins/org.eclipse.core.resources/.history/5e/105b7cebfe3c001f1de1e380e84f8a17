package java06_class.method;

// 일반 클래스(메인이 없다)
public class Method_01 {

//	메소드(Method)
//	- 함수(Function)과 같은 역할
//	- 함수는 단순히 코드의 집합이라는 뜻이지만, 메소드는 클래스에 정의된 인스턴스 내부 함수라는 뜻까지 갖고 있다.
//
//	- 객체(클래스)의 기능, 동작, 행위 등을 정의하는 코드
//
//	- 객체 변수를 통해서 메소드를 호출(사용)할 수 있다.
//
//	- 객체들 간의 상호작용이 이루어진다
//
//	- 객체들이 서로 데이터를 교환할 때 사용한다
//
//	- 메소드 정의 방법(난이도가 높다!)
//
//	[접근제한자] [메소드제한자] [리턴타입] [메소드명] ( [매개변수] ) {
//
//	실행 코드
//
//	}
//
//	-접근제한자
//
//	private, default, protected, public 다 적용 가능
//
//	주로 public을 사용한다
//
//	-메소드 제한자
//
//	메소드의 추가적인 역할, 기능 등을 부여할 때 사용한다
//
//	abstract, final, static, …
//
//	특별한 일이 없으면 잘 쓰지 않는다.
//
//	-리턴 타입(Return Data Type, 반환 자료형)
//
//	메소드가 종료할 때 되돌려 주는 데이터의 자료형을 명시한다
//	메소드를 호출한 코드로 되돌려 줄 반환값의 자료형을 뜻한다
//
//	리턴값(반환값)이 없으면 void라고 적는다
//
//	-메소드명
//
//	첫 글자를 소문자로 작성한다
//
//	메소드 - 주로 기능을 표현하고
//
//	필드, 변수 - 주로 정보를 표현하기 때문에 
//
//	메소드는 주로 동사, 필드나 변수는 주로 명사를 쓰는 경우가 많다.
//
//	-매개변수
//
//	메소드의 동작에 필요한 데이터를 저장하는 변수
//
//	메소드의 입력 데이터

//	없으면 ()괄호 안을 비워둔다.
	
// [접근제한자] [메소드제한자] [리턴타입] 메소드명( [매개변수] ) {
//	실행 코드
//}
	
	//--------------------------------------------------------------------
	
	//0. 메소드의 기본 형태 작성하기
//	public void method() {

//	}
	
	//1. 메소드 이름 정하기 -> 만들려는 기능을 대표하는 단어로 이름을 정한다.
	//2. 매개변수 작성하기 -> 기능을 수행하기 위해 필요한 데이터를 저장할 수 있도록 변수를 선언한다.
	//3. 실행코드 작성하기 -> 메소드의 기능을 구현한다.
	//4. return코드 작성하기 -> 기능을 수행한 결과값을 반환해야할 때 작성한다.
	//5. return타입 작성하기 -> return 코드에 맞는 자료형을 작성한다. 

	//--------------------------------------------------------------------

	//뺄셈 기능의 메소드 작성
	// -> 2개의 정수값을 뺄셈하고 결과값을 반환하는 기능을 구현한다
	//1. 메소드 이름 정하기 -> subtract
	//2. 매개변수 작성하기 -> int num1, int num2
	//3. 실행코드 작성하기 -> num1 - num2
	//4. return코드 작성하기 -> return 결과값;
	//5. return타입 작성하기 -> int
	
	//1,2,4,5는 문법으로 익숙해져야 하며, 3은 코딩실력 자체를 키워야 한다.
	public int subtract(int num1, int num2) {//매개변수의 문법에서는 같은 자료형이더라도 자료형을 따로 적어줘야 한다.
		int result = num1 - num2; // subtract의 지역 변수 result
		return result;
//		return num1 - num2; 이렇게 써도 된다.
	}
}
