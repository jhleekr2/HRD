package java03_scanner;

public class StringFormat {
	public static void main(String[] args) {
		
//		String.format("서식문자를 포함한 문자열", 서식문자를 대체할 데이터)
		// ex) String.format("%d 원 입니다", 10000);
		// -> "10000 원 입니다"
		
		// -> 서식문자 %d의 자리로 데이터 10000로 치환된다.
		// ------------------------------------------------------------------
		// ** 서식문자의 종류
		// %d - 10진 정수
		// %f - 실수
		// %c - 단일 문자
		// %s - 문자열
		
		// ** %기호와 서식지정글자 사이에 숫자를 추가해 자릿수를 지정한다.
		// ------------------------------------------------------------------
		
		String text1 = String.format("%s", "안녕하세요"); // %s <- 문자열(String 타입)
		System.out.println( text1 ); // %s 대신에 오른쪽의 문자가 들어가게 된다.
		
		int sum = 231;
		String text2 = String.format("총점 : %d점", sum);
		System.out.println( text2 ); // %d 대신에 오른쪽의 변수 들어가게 된다.
		
		// ------------------------------------------------------------------

		System.out.println( String.format("%s %d", "HIHI", 9678)); // 변수가 두개이상 들어갈 때는
		// 콤마로 변수를 구분한다. 그러면 앞쪽부터 서식문자를 채우게 된다.
		System.out.println( String.format("%10s %d", "HIHI", 9678));
		// %10s -> 10칸으로 맞춰진 상태로 출력된다. 예전에 콘솔기반 프로그램에서 간격맞출때 많이
		// 사용되던 간격맞추기 방법이나, 최근에는 환경이 웹으로 바뀌면서 잘 사용되지 않고 있다.
		// 2010년대 초반까지만 하더라도 콘솔기반 프로그램들을 심심찮게 볼수 있었었다.
		System.out.println( String.format("%10s|%5d", "HIHI", 9678));
		// ------------------------------------------------------------------
		
		System.out.println( String.format("%9.4f", 123.45 ));
		// %9.4f" -> 전체 9자리(소숫점칸도 포함) 출력을 하는데 이때 소숫점 4자리를 유지하라는 뜻.
		// 정수부분은 결국 4칸만 남게 되었다.
		
		// 전체 문자열을 9자리로 구성한다.
		// 소수부분을 4자리로 고정한다.
		// 실수의 .(구두점)으로 1자리 사용한다.
		// 나머지를 정수부분이 사용한다.
		System.out.println( String.format("%.6f", 1.23456789 ));

	}
}
