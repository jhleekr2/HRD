package java05_array.quiz;

public class ArrayQuiz2 {
//	 int[] arr = {10, 17, 3, 9, 27, 10, 8, 9, 13, 21};
//	 배열이 선언된 뒤 문제를 푸시오
//
//
//	 - arr 배열을 invert_arr라는 배열에 거꾸로 입력하시오
//	 => invert_arr : { 21, 13, 9, 8, 10, 27, 9, 3, 17, 10 }
//
//
//	 - arr 배열의
//	  (짝수번째 인덱스 내용의 합) - (홀수번째 인덱스 내용의 합)을
//	  구하시오
//	  	=> -5
//
//
//	 - arr 배열의 숫자들 중 높은 숫자가 1등이 되게하여
//	  rank_arr라는 배열에 순위를 입력하시오
//	 	=> arr :     { 10, 17, 3, 9, 27, 10, 8, 9, 13, 21 }
//	     => rank_arr :{  5,  3, 10,7,  1,  5, 9, 7,  4,  2 }
//
//
//	 - arr 배열의 요소들 중 중복된 값은 over_arr에 넣고 중복되지
//	  않은 값은 ret_arr에 입력하시오
//	 	** over_arr, ret_arr은 길이가 10인 배열로 작성한다
//	 	
//	 	출력한다면 (정렬도 할 수 있으면 해도 됨)
//	 	=> over_arr : 9, 10
//	 	=> ret_arr : 3, 8, 13, 17, 21, 27
//	이 문제는 숙제로 나가며 직접 풀어볼 것!
	public static void main(String[] args) {
		int[] arr = {10, 17, 3, 9, 27, 10, 8, 9, 13, 21};
		int[] invert_arr; // 거꾸로 배열 공간 정의
		invert_arr = new int[10]; // 배열의 원소 개수 정의
		
		for(int i=0; i<10; i++) {
			invert_arr[9-i] = arr[i]; // 배열 원소 거꾸로 만듦
		}
		
		for(int i=0; i<10; i++) {
			System.out.print(invert_arr[i] + ", "); // 거꾸로 배열의 성분 출력
		}
		
		System.out.println();
		
		int oddSum = 0; //짝수번째 인덱스 합
		int evenSum = 0; //홀수번째 인덱스 합
		for(int i=0; i<10; i++) {
			if(i % 2 == 0) {//짝수번째 인덱스일때
				evenSum += arr[i];
//				System.out.println(evenSum);
			}
			else {//홀수번째 인덱스일때
				oddSum += arr[i];
//				System.out.println(oddSum);
			}
		// 짝수번째 인덱스 합과 홀수번째 인덱스 합 구함.
				
		}
		
		System.out.println("짝수번째 인덱스 합 - 홀수번째 인덱스 합 = " + (evenSum - oddSum));
	
		int[] Rank_arr; // 순위용 배열 정의
		Rank_arr = new int[10]; //배열의 숫자 10개

		
		for(int i=0; i<10; i++) {
			Rank_arr[i] = 10; // 순위용 배열을 전부 초기화함
			for(int j=0; j<10; j++) {
					if(arr[i] > arr[j]) {
						Rank_arr[i] -= 1; // 배열의 구성 원소끼리 비교해서 더 큰 것의 갯수만큼 순위값을 뺀다.
					}
				} // 두번째 for end
			
			} // 첫번째 for end
		
		for(int i=0; i<10; i++ ) {
			for(int j=i+1; j<10; j++) {
				if(Rank_arr[i] == Rank_arr[j]) {
					Rank_arr[i] -= 1; // 동점자 처리 부분 : 동점자가 있으면 순위 높은쪽으로 적용한다.
					Rank_arr[j] -= 1;
				}
			}
		}
		for(int i=0; i<10; i++) {
		System.out.print(Rank_arr[i] + " "); // 결과값 출력
		}
		System.out.println();
//	더 간단한 풀이 - 순위배열을 1로 초기화해서 더 작은 것의 갯수만큼 순위값을 더하면 동점자 처리부분을
//	따로 고려할 필요가 없다.
		
		int[] over_arr;
		int[] ret_arr;
		
		over_arr = new int[10];
		ret_arr = new int[10];
		
		for(int i=0;i<10; i++) {
			for(int j=i+1;j<10;j++) {
				if (arr[i] == arr[j]) { // 각각의 배열 원소들끼리 비교하면서 같은 원소가 있는지 확인
					over_arr[i] = arr[i]; // 같은 원소가 있다면 over_arr[i]에 복제
				}
			}
			ret_arr[i] = arr[i]; // 이후 arr[i]의 원소를 ret_arr[i]에 복제하고
			if(over_arr[i] == ret_arr[i]) { // over_arr[i]의 원소와 ret_arr[i] 비교해서
				ret_arr[i] = 0; // 같다면 ret_arr[i]를 다시 0으로 둔다.
			}
		}
		
		// over_arr와 ret_arr의 값 출력
		for(int i=0;i<10; i++) {
//			if(over_arr[i] != 0) {
				System.out.print(over_arr[i] + " ");
//			}
		}
		System.out.println();
		for(int i=0;i<10; i++) {
//			if(ret_arr[i] != 0) {
			System.out.print(ret_arr[i] + " ");
//			}
		}
		System.out.println();

		int arrSpare; // 서로의 순서를 바꾸기 위해 임시변수를 지정함
		
		// 버블 소트 정렬 사용해서 over_arr[i]와 ret_arr[i] 정렬
		for(int i=0; i<9; i++) {
			for(int j=0 ; j<9-i; j++) {
				if( over_arr[j] > over_arr[j+1]) {
					arrSpare = over_arr[j];
					over_arr[j] = over_arr[j+1];
					over_arr[j+1] = arrSpare;
				}
			}
		}
		for(int i=0; i<9; i++) {
			for(int j=0 ; j<9-i; j++) {
				if( ret_arr[j] > ret_arr[j+1]) {
					arrSpare = ret_arr[j];
					ret_arr[j] = ret_arr[j+1];
					ret_arr[j+1] = arrSpare;
				}
			}
		}
		
		// over_arr와 ret_arr의 값 출력
		for(int i=0;i<10; i++) {
//			if(over_arr[i] != 0) {
			System.out.print(over_arr[i] + " ");
//			}
		}
		System.out.println();
		for(int i=0;i<10; i++) {
//			if(ret_arr[i] != 0) {
			System.out.print(ret_arr[i] + " ");
//			}
		}
	}	
}

// 버블 소트 정렬
// int arr={3,2,5,4,1}
// 첫번째 시도 (1-5번 원소까지 비교)
// 첫번째 원소와 두번째 비교해서 (32541)
// 첫번째 > 두번째 이면
// 첫번째와 두번째 바꿈 (23541)
// 이후 두번째 세번째 비교해서
// 두번째 >세번째이면
// 두번째와 세번째 바꿈 (23541)
// 다음은 세번째와 네번째 비교
// 세번째 >네번째이면
// 세번째와 네번째 바꿈 (23451)
// 마지막으로 네번째와 다섯번째 비교
// 네번째 > 다섯번째이면
// 네번째와 다섯번째 바꿈 (23415)

// 두번째 시도 (1-4번 원소까지 비교) - 마지막은 이미 정렬 끈
// 23415-> 23145



// 국비 - 처참한 현실!
// 퀴즈 1번문제를 제한시간에 푼 사례가 10-15퍼센트에 불과
// 절대로 국비 수업에서 1등은 아니며, 대충 상위 3등정도는 되는것 같음.
// 이후 엎치락뒤치락하는 어느 형이랑 친해지게 됨