package java06_class; // 파일 하나는 하나의 기능을 의미

//캡슐화(Encapsulation)
//- 객체지향프로그래밍의 특징 중 하나
//- 객체의 속성(필드)과 기능(메소드)를 하나의 클래스로 묶어서 표현한다
//- 서로 연관있는 데이터와 기능들을 하나의 클래스로 작성한다
//- 객체의 속성(필드)은 중요한 정보이므로 외부에서 함부로 접근할 수 없도록 처리한다
//→ 정보 은닉(Information Hiding)
//→ 필드에 접근제한자를 적용하여 구현한다
//** 멤버 필드는 private 적용
//** 멤버 메소드는 public 적용
//
//- 클래스(Class)
//- 작성 방법
//[접근제한자] [클래스식별자] class [클래스명] {
//// 멤버 필드
//// 멤버 메소드
//// 생성자
//}
//
//- 클래스의 접근 제한자
//public 또는 default 두 가지만 적용할 수 있다.
//
//>> public을 적용한 경우
//어디에서든지 사용할 수 있는 클래스가 된다.
// -> .java 파일 안에 딱 하나의 public 클래스만 존재할 수 있다.
// -> 해당 클래스는 파일 이름과 같은 이름으로 정의해야 한다.
// -> public 클래스는 해당 .java 파일의 주 클래스로 사용된다
//>> default를 적용한 경우
//같은 패키지에서만 사용할 수 있는 클래스가 된다.
// -> public 클래스를 보조하는 클래스로 사용된다
//
//- 클래스 식별자, 제한자(Modifier)
//클래스의 용도에 맞게 특별한 기능을 부여할 때 사용한다
// abstract, final, static, ...
//
//- 클래스명
//첫 글자를 대문자로 시작한다
//식별자 규칙에 맞게 작성한다 

public class Class_03 { //정식이름 java06_class.Class_03
// 주기능 클래스
}

class Apple { // 실제 개발에서는 default 클래스 사용을 피하려고 하는 추세
// 보조 기능 클래스	- 실제 개발에서는 보조기능 클래스를 쓰기보다는, 다른 주기능 클래스를
// 추가하는 경향이 있다. 이 부분은 자바 원작자조차도 보조기능 클래스의 필요성이 없다고
// 인터뷰한 적이 있다고 한다.
}

class Banana {
	
}

class Cherry {
	
}