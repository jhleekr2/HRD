package java06_class;

//- 객체 지향 프로그래밍(Object Oriented Programming, OOP)
//
//- oriented = ‘~지향의, ~위주의, ~기반으로’
//
//- 객체를 기반으로(중심으로, 위주로) 프로그램을 작성하는 기법을 말한다
//
//- 객체(Object)들을 중심으로 객체들 간의 상호작용(데이터 전달, 교환)을 통해
//
//프로그램으로 작동되도록 작성하는 프로그래밍 기법이다
//
//- 최신 자바(21-22)에서는 절차적 프로그래밍 기법을 도입하고 있다.(실무에서 만나려면 15-20년 후의 일)
//
//** 절차적 프로그래밍(Procedural Programming)
//
//- 프로그램의 명령어(코드)들의 나열로 프로그램이 절차적으로 작동되도록 작성하는 기법
//
//- 코드가 순차적으로 실행되도록 만든다
//
//** 객체지향 프로그래밍(Object Oriented Programming)
//
//-명령어들과 데이터의 집합(모음)단위인 “객체”로 묶어 프로그래밍하는 기법
//
//-라이브러리(Arrays, Scanner)등을 사용할 때 이미 객체지향 프로그래밍 기법을 일부 사용했다.
//
//- 객체(Object)
//
//- 현실 세계에 존재하는 모든 대상들을 객체라고 생각한다
//
//- 프로그램에서 구현(표현)하려는 목적에 맞는 모든 대상들을 객체라고 한다.
//
//- 클래스(Class)
//
//- 객체를 프로그램으로 표현하기 위해 코드로 작성된 것
//
//- 객체를 추상화하여 클래스 코드를 작성한다
//
//** 추상화(Abstraction)
//
//프로그램에서 필요한 요소들에만 집중해서 정리하는 작업
//
//객체의 특징 중에서 불필요한 것, 중요하지 않는 요소들을 무시한다
//
//객체들의 공통적인 속성, 정보, 기능, 행위 들을 코드로 추출하는 작업
//
//ex) 학생 점수 관리 프로그램
//
//학생 1,2,3,4,5, … - 객체
//
//이름, 학년, 반, 전화번호, 혈액형, 키, 점수, 사는 곳 등 정보
//
//→ 여기서 필요한 점수 정보만을 추출한다(추상화)
//
//** 사람 정보 관리 프로그램
//
//- 이름, 나이
//
//현실 세계 대상 ————> 클래스 ————> 인스턴스 - 메모리 실체
//
//(객체, object)     (추상화)     (class)  (인스턴스화 = new연산자 - 객체 생성) (instance)
//
//개똥이, 26세                       이름, 나이
//
//말똥이, 28세                       class Person {         Person p;
//
//소똥이, 36세                            String name;    (객체 변수)
//
//…                                              int age;             p=new person();
//
//                                            }(정의)                   (생성) - 힙(Heap)에 생성
//
//                                                                       데이터타입은 person(참조형)
//
//                                                                         p.name = “개똥이”;
//
//                                                                         p.age = 26;
//
//* 이 부분은 CS면접에서 출제된다!
//
//- 인스턴스(Instance)
//
//- 클래스(class) 코드를 통해 생성된 실체(실제 메모리 공간)
//
//- 프로그램에서 사용할 수 있도록 메모리에 생성된 결과물을 뜻한다
//
//- 실제 존재하는 것(영어의 for instance를 생각!)
//
//- 인스턴스화(instantiate)
//
//- 인스턴스를 만드는 작업
//
//- 메모리에 실체를 만드는 작업을 뜻한다
//
//- new연산자를 이용하여 데이터를 저장할 수 있는 메모리 공간이 생긴다
//
//** 클래스 → 인스턴스
//
//객체를 사용하여 인스턴스를 만들기 때문에 인스턴스도 객체라고 말하기도 한다.
//
//여기서 현실 세계의 대상을 뜻하는 객체인지, 메모리상에 생성된 인스턴스를 뜻하는 객체인지 혼동할 수 있다
//
//현업에서는 인스턴스를 그냥 객체의 일종으로 취급한다
//
//** 건축 설계도(클래스) → 실제 만들어진 건물(인스턴스)



//실행 클래스(Main 메소드가 있는 클래스)
// 메인 메소드를 정의하고 있는 클래스
// 프로그램을 실행할 수 있는 클래스
public class Main_01 {
	public static void main(String[] args) {
		
		int n; // 메인 메소드의 지역 변수
		
		System.out.println("main() 실행 테스트");
		System.out.println("---------------------------");
		
		// Class_01 타입의 참조형 변수인 c01 선언
		Class_01 c01;// 실제 정식 명칭은 java06_class.Class_01 이지만
		// 같은 패키지여서 패키지명 생략
		
		
		// Class_01 타입의 인스턴스를 생성한다(new 연산자 이용)
		c01 = new Class_01(); // 인스턴스화
		// 인스턴스의 참조값을 c01 객체 변수에 대입한다.
		
		//---------------------------------------------------------
		
		// 멤버 필드의 이용

		c01.num = 123; // int형
		c01.data = "Apple"; //char형
	
		// 멤버 메소드의 이용
		
		//메소드 호출(call, 사용)
		c01.display();
		
		Class_01 c02 = new Class_01(); // 모양이 똑같은 형태가 복제됨
		Class_01 c03 = new Class_01();
		Class_01 c04 = new Class_01();
		
		//---------------------------------------------------------

		c02.num = 200;
		c03.num = 300;
		c04.num = 400;
		
		//---------------------------------------------------------

		System.out.println("---------------------------");
		
		//객체 변수를 출력하면 참조값이 출력도니다
		// -> 레퍼런스(Reference)
		System.out.println(c04); // 참조형 변수이므로 참조값이 출력된다(데이터타입@메모리주소)
	
		System.out.println("---------------------------");

		Class_01 c05 = null; // 참조 대상 X
		//에러, NullPointerException 발생
//		c05.data = "Banana"; // NullPointerException 예외가 발생하여 실행이 중지된다.
		// "참조 대상이 없는데 참조하러 찾아가라고?"
		
		// 이 오류는 앞으로 자주 보게 될 오류이며, 해결책을 정확히 알아야만 한다.
		
		// ** NullPointerException
		// -> null 값을 참조하여 코드를 실행하려고 했을 때 발생한다.
		// 참조.안쪽 -> .은 단항 연산자
		// 이 오류가 발생하면 오류가 발생한 곳을 찾아서 그곳의 .을 찾는다.
		// 그러면 거의 대부분의 경우에서 .왼쪽이 null값으로 문제를 일으키는 원인이다.
		
	} // main end
	
}
