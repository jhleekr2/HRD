package java01_variables;

public class Variables_02 {
	public static void main(String[] args) {
		//각 유형의 대표 자료형
		//int, double, boolean, char
		//----------------------------------------------------
//		- 변수,variable
//		- 데이터(값)를 저장하기 위한 메모리의 특정 공간
//		- 저장할 수 있는 데이터의 형식(유형, 크기 등)은 자료형으로 결정한다.
//		- 데이터를 사용할 때 저장해놓고 지워지지 않도록 보관하는 방법이다.
//		- 변수 공간에는 이름을 붙여서 사용한다.
//		- 변수 공간에는 한 순간에 하나의 데이터만 저장할 수 있다.
//		- 저장된 데이터는 계속 변경할 수 있다.
//
//		- 변수 선언
//	    자료형 변수이름;
//	    
//		- 프로그램에서 사용하려는 변수 공간을 생성하는 코드
//		- 자료형을 명시하고 이름을 지정하여 선언한다.
//		- 기본 자료형 8가지를 기반으로 자유롭게 확장하여 참조형 자료형(클래스, 객체)를 만들 수 있어야 한다.
//
//		- 변수 대입
//	    	변수명 = 데이터;
//		- 생성되어 있는 변수 공간에 데이터를 저장하는 것
//		- 변수의 자료형에 맞는 값을 저장할 수 있다.
//		- 변수의 선언과 동시에 초기화
//		    자료형 변수명 = 데이터;
//		    
//	
//		-변수를 생성하면서 대입까지 한번에 할 수 있다. 
//		
//		- 식별자 이름 규칙
//		** 식별자(Identifier = ID)
//		고유한 대상들을 서로 구분하기 위한 값
//		변수 이름, 패키지 이름, 메소드 이름, 클래스 이름 등에 적용한다.
//	
//		** 명명 규칙
//		이름을 부여하는 규칙
//		네이밍 규칙, Naming
//	
//		변수 선언 규칙
//		- 영어 대문자, 소문자, 숫자를 허용한다.
//		- 특수문자는 _ 와 $ 만 허용한다.
//		- 대소문자를 구분한다
//		(ex. A와 a는 다른 글자이다)
//		- 숫자로 시작하면 안된다.
//		- 띄어쓰기는 허용하지 않는다.
//		** 변수명, 패키지명, 메소드명은 소문자로 시작하는 것이 관례
//		** 클래스명은 대문자로 시작하는 것이 관례 - 자바에선 클래스 하나하나가 중요한 기능역할을 한다는 것을 강조하기 위해서.
//			
		// int 변수이름; // 자바는 유니코드 사용하므로 변수이름을 한글로 써도 되지만, 인코딩이 바뀌면 한글이 깨지는 문제 때문에
		// 사용하지 않고, 변수 이름은 되도록 아스키 코드로 써야 한다.
		// 원래는 주석도 영어로 써야 하나, 최근에는 UTF-8이 일반화되어서 주석을 영어로 쓰지 않아도 상관없는 경우 많다.
		// 다만, 인코딩으로 인해 골치아픈 문제를 현업에서 마주칠 수는 있다.
		
//		data = 13; 변수를 만들기 전에 사용하면, "[변수이름]을 변수로 확인할 수 없습니다." 오류가 발생한다. 
//		"[변수이름] cannot be resolved to a variable."
		
		byte bData = 123; //  컴퓨터는 오른쪽 숫자(int로 처리)를 먼저 메모리에 기록하고 왼쪽 변수에 기록하면서 변수형이 바뀐다.
		
		short sData = 456;
		
		long lData = 3000000000L; // 처음 메모리에 기록할 때 부터 int로 처리하지 않고 long으로 처리하기위해서 처음부터 L을 쓴다.
		// 따라서, 왼쪽은 21억 넘는숫자 저장할수 있지만, 처음 숫자 대입할때 21억 넘는숫자를 바로 대입할 수 없다.
		
		float fData = 3.14F; // 실수는 기본이 double로 처리하기 때문에, float로 대입하려면 반드시 F를 써줘야 한다.
		
		// 변수 선언(Declaration)
		int data;
		// -> int형 데이터를 저장할 수 있는 메모리공간(변수)이 생성된다.
		
		// 변수에 값(데이터) 대입(Assignment)
		data = 17;
		// = 오른쪽에 있는 값을 왼쪽에 있는 변수에 대입한다.
		// -> data변수에 17이라는 값을 저장한다.
		// 주석을 꼼꼼히 계속 적다보면 나중에는 주석 없이도 어려운 코드를 쉽게 해석할 수 있다.
		
		data = 99;//값 대입
		// -> data변수에 99라는 값을 저장한다
		// -> data변수에 저장되어 있던 이전 값 17을 지우고 99로 대체한다.
		
		System.out.println( data );
		// 변수를 찾아 변수에 저장되어 있는 값을 가져와서 출력한다.
		// -> data 변수에 저장되어 있는 99를 불러와서 콘솔에 출력한다.
//		System.out.println( 99 );
		// 프로그램을 추적하는 개발 노트를 써보면 좋다. 이 습관이 지금부터 훈련되어야 길어진 코드를 분석할 수 있다.
		// 더 나중에 가면, 클래스를 여러개 쪼개서 코드가 짧아지겠지만, 이 때부터는 굉장히 복잡하게 생각하고 분석해야 한다.
		// 따라서, 프로그램을 추적하는 습관을 기르는 것이 도움이 많이 된다.
		// 개발하다보면 자료구조와 알고리즘이라는 로직 능력이 필요한데, 이 로직 공부 때도 개발노트 및 주석을 달아보는 것을 강력히 추천한다.

	}
}
