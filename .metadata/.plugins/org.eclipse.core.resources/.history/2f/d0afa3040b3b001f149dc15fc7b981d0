// 주석 단축키:Ctrl + /
// 한줄주석 토글(toggle) 단축키:Ctrl+Shift+C
// 토글:스위치와 같은 전환장치를 의미한다.
// 패키지 선언
package java01_variables;

// 클래스 정의 - 실제 프로그램에는 기능이름을 사용
public class Variables_01 {
	
	//프로그램 시작점 - 메인 메소드
	//코드에서 종종 밑줄이 뜰 때가 있는데,
	//밑줄중 빨간색 - 무조건 없애야 함
	//밑줄중 노란색 - 한번 체크해봐야 함
	//나머지 밑줄 - 무시해도 됨
	public static void main(String[] args) {
//		
//		- 자료형(Data Type, 데이터 타입)
//		- 컴퓨터에서 데이터(값, 수치 등)를 표현하는 방법을 정해놓은 규칙
//		- 자바의 기본 데이터타입 - 데이터타입은 프로그래밍 언어마다 조금씩 다르다.
//		- 자바에서 데이터를 표현하는 8가지 방법
//		- 정수형 타입 (소숫점 이하 표현 불가)
//		byte 타입        1B      -128 ~ 127(256개)
//		short 타입       2B      -32768 ~ 32767
//		int 타입           4B      -2147483648 ~ 2147483647 (정수형의 기본 자료형)
//		long 타입        8B      약 -900경 ~ 약 900경
//		int가 정수형의 기본 자료형이며, 실제로도 byte, short은 잘 사용되지 않고, 주로 int형이 쓰인다.
//		
//		- 실수형 타입 (소숫점 이하 표현 가능) - 소숫점 아래로 몇자리까지 정확성을 보장하느냐로 구분.
//		** 실제 CPU나 GPU의 경우에는 내부에 정수형 연산과 실수형 연산을 하는 부분이 따로 나누어져 있다.
//
//		float 타입       4B   (옛날 언어들의 경우는 float이 기본자료형인 경우가 있다., 소숫점 5째 자리까지 표현가능)
//		double 타입   8B   (실수형의 기본 자료형)
//
//		- 논리형 타입
//		boolean 타입 1B (참(True)/거짓(False)을 판단할 수 있는 명제의 결과-논리)
//		(불린, 불리언) - true / false
//
//		- 문자형 타입
//		char 타입       2B (다른 언어와 다름, C언어는 1바이트)
//
//		(캐릭터 타입)
//		문자형은 컴퓨터 내부에서는 정수형 타입으로 처리된다. 이 때, 숫자 코드를 문자로 매핑(mapping)시킨 문자 체계를
//		표로 적용해서 사용한다. 이 때 1Byte로 표현할 수 있는 양수인 0~127까지의 숫자만 가지고 문자에 대응시킨 문자 체
//		계를 아스키 코드라 부른다.
//		** ASCII 코드, American Standard Code for Information Interchange
//		- 영어 대소문자, 숫자, 특수기호, 가상키, 공백문자 등을 매핑한 체계
//		- 한글 없음
//		- 0~127 영역만 사용
//
//		** Unicode,  유니코드
//		- ASCII로는 표현할 수 없는 전세계 문자들을 표현하는 방법
//		- 0~65535까지 사용(-32768~32767을 음수를 무시한 상황)
//		- 코드 변환 과정(인코딩)을 적용해서 사용한다.
//		- 한글 인코딩 방식은 UTF-8, EUC-KR, MS949(CP949) 방식이 있다.
//		- 주로 UTF-8 방식을 사용한다.
//		UTF-8에서 한글 범위 - AC00~D7A3
//		AC00(44302) - ‘가’, D7A3(55203) - ‘힣’ 
//		** 이모지도 유니코드에 포함되어 있다.
//		이모지 단축키 - win키 + .
//		자바의 경우에는 이모지를 쓰면 깨진다.
//
//		숫자 65 → int 자료형 → 숫자 65로 처리
//		숫자 65 → char 자료형 → 문자 A로 처리
//		하지만, 아스키 코드를 만들어 놓고 보니 문제가 생겼는데, 사람들은 영어만 쓰지 않았고, 이로 인해 여러 문제가 생겨서 2Byte 이상을 사용하여 표현할 수 있도록 MS949, EUC-KR 등이 나오다가 결국은 UTF-8로 정착되었다.
//
//		- 기본 자료형에 대해서는 알 필요가 있다.
//		- 1 bit = 1(on), 0(off)라는 전기적 신호를 나타낸다.
//		- 8 bit = 1 Byte
//		- 1024 Byte = 1 Kilo Byte
//		- 1024 KB = 1 MB
//		- 1024 MB = 1 GB
//		- 1024 GB = 1 TB
//		- 컴퓨터는 2의 제곱으로 계산을 많이 한다. 2^10⇒1024, 2^32⇒42억
//		- int 4Byte ⇒ 2^(8X4)
//		- long 8Byte ⇒ 2^(8X8)
//		System.out.println("동작 테스트");
//		사용한 코드들은 지우기보다는, 남겨두고 주석처리 하는 습관을 들이자. 이후 사용한 코드들은, 완성후 마무리할때 제거.
		System.out.println("안녕");
		System.out.println(); // 줄바꿈, 개행
		System.out.println("하세요");
		
		System.out.println("-----------------");

		System.out.println( 12345 ); // 둥근괄호 안에 큰따옴표를 쓸수도 있고 쓰지않을 수도 있으며, 관련된 규칙이 있다.
		System.out.println( 123.456 );
//		컴퓨터는 소숫점이하가 없는 숫자(정수)와 있는 숫자(실수)를 구분하고, 이 두가지를 서로 구분하여 개발해야 한다.
//		이때 둥근괄호 바깥쪽을 '수행코드'라 부르고, 둥근괄호 안쪽을 '데이터'라 부른다.
		System.out.println( true );
//		참(true)/거짓(false) - 논리값
		System.out.println( 'A' ); // 둥근괄호 안에 작은따옴표를 두개 쓸수 있지만, 이때 작은따옴표를 썼을 때는 문자, 안썼을 때는 숫자로 인식한다.
//		아울러, 작은 따옴표 사이에는 문자 1개만을 써야 하고 안 쓰거나, 2개 이상 쓰면 오류가 발생한다.
//		단일 문자:1개 글자 표현

//		모든 컴퓨터 언어들은 정수, 실수, 논리값, 단일 문자의 4가지 데이터가 기본 자료형이다.
		System.out.println( 'T' ); // 단일 문자:1개 글자 표현
		System.out.println( (int)'T' );
		
		System.out.println( (char)65 );
		
		System.out.println("-----------------");

		System.out.println( "Hello" ); // 문자들의 나열(문자열):0개 이상의 글자 모음
		System.out.println( "" ); // 빈(empty) 문자열
//		System.out.println()에서 둥근괄호와 데이터 사이에 한칸씩 띄워써도 결과에 영향을 주지는 않는다.

	}
	
}
