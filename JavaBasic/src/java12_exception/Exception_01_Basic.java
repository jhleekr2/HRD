package java12_exception;

public class Exception_01_Basic {
	public static void main(String[] args) {
		
//		프로그램 개발 오류, 에러(Error)
//		1. 컴파일 타임 에러(Compile-Time Error)
//		컴파일 시점에 발생하는 에러를 뜻한다
//		이클립스에서는 소스 코드를 저장하는 즉시 발견된다
//		주로 문법 에러를 뜻한다(Syntax Error)
//
//		2. 런타임 에러(Runtime Error)
//		프로그램을 실행하는 도중에 발생하는 에러
//		수행할 수 없는 작업을 시도했을 때 발생한다
//
//		3. 논리 에러(Logical Error)
//		프로그램은 에러없이 정상적으로 실행되는 상황
//		정상 동작하는 것처럼 보이는 상황
//		개발자가 의도한 대로 프로그램이 동작하고 있지 않은 상황을 뜻한다
//		ex) (의도하지 않은) 무한 루프
//		** 컴파일타임 에러와는 달리 런타임 에러나 논리 에러는 개발자가 직접 에러를 찾아서 수정해야 하는 경우가 많다
//		
//		Throwable 클래스
//		- 런타임 에러 상황을 정의하고 있는 모든 클래스들의 최상위 클래스
//		- Error 클래스, Exception 클래스를 자식 클래스로 가진다
//
//		Error클래스, 에러
//		- 심각한 수준의 오류
//		- 정상적인 흐름으로 복구가 안되는 수준의 문제 상황
//		- 프로그램 코드로 자체적인 방법으로 해결하거나, 미리 대비할 수 없는 상황
//		ex) OutOfMemoryError
//		→ 메모리의 가용 용량이 부족한 상황에서 할당을 시도한 상황
//
//		Exception클래스, 예외
//		- 프로그램이 실행되는 동안 발생하는 예외적인 상황들을 정의하는 클래스
//		- 개발자가 예외 상황을 예측해서 프로그램 코드로 미리 처리 가능한 수준의 런타임 오류를 뜻한다
//		- try ~ catch 구문을 이용하여 미리 “예외 처리” 작업을 하는 코드를 작성한다

//		int[] arr = new int[2100000000]; // 여기서 램을 4byte * 2100000000 / 1024 / 1024 = 8010(MB) 소모한다
		// 실행하면 OutOfMemoryError 발생!
		// -> 할당할 수 있는 메모리가 충분하지 않음
		// 왜 시스템에 램이 16GB 있는데도 이런 오류가 발생하는가? JVM의 최대 램 할당량이 4GB로 제한되어 있다.
		// 결국 메모리 부족 오류를 뿜고 프로그램이 뻗는다.
		
		//------------------------------------------------------------------------
		
		int[] arr = new int [5];
		
		int i = 0;
		
		while( true ) {
			
			//예외상황 처리
			// -> 전통적인 방식의 예외처리
			if( i >= arr.length) {
				break;
			}
			arr[i] = i+1; // 예외 발생 지점
			i++;
		}
		//새로운 방식 - try ~ catch문을 이용한 방식
		
	}
}
