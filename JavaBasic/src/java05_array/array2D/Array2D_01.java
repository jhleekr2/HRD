package java05_array.array2D;

public class Array2D_01 {
	public static void main(String[] args) {
		
		//2차원 배열
		
		int num; // int형 변수 선언 -> 정수값 1개 저장 공간
		
		int[] arr1D; // int형 배열 변수 선언 -> 정수값 여러 개 저장
		
		int[][] arr2D; //(int[])[] arr2D;
		// int형 2차원배열 변수 선언
		//int형 배열을 여러 개 저장
		//-> ((정수값)의 여러 개 묶음) 을 한 번 더 여러 개 묶어서 포장한 것
		
		int[][][] arr3D;	//int형 3차원 배열 변수
		int[][][][] arr4D;	//int형 4차원 배열 변수
		int[][][][][] arr5D;//int형 5차원 배열 변수
		
		//----------------------------------------------
		
		//배열은 1차원, 2차원 배열이 대부분이고, 3차원 이상은 잘 안쓰이지만,
		//클래스 참조관계 고려한다면 실질적으로 4~6차원 배열까지 쓰인다고 할 수 있다.
		
		int n12;
		
		int[] testArr = new int[12]; // int형 12개
		// 1줄로 옆으로 나열했다고 생각한다!
		int[][] data = new int[3][4]; // int형 4개씩 3묶음 (뒤쪽부터 파악하자!)
		// 3행 4열의 논리구조를 가진다고 생각한다!
		
		//----------------------------------------------
		
		//2차원 배열 변수 선언
		int[][] arr;
		
		//2차원 배열 공간 생성 - new연산자
		arr = new int[3][2]; // 3행 2열 크기(2개씩 3묶음)의 int형 변수 공간이 생성된다
		// 행은 줄, 열은 칸 의미
		
		//1행 0열 인덱스 요소에 55555 대입
		arr[1][0] = 55555;
		
		System.out.println( arr[1][0] );
		
		//2차원 배열은 이중 for문을 사용해야 돌아간다. (i행 j열)
		
		//프로그램의 특성상 3차원을 넘어가면 삼중 for문 이상으로 넘어가야 하는데
		//이때부터는 성능이 눈에 띄게 느려진다.
		//따라서, 사람들은 되도록이면 삼중 for문 이상의 사용을 피하려고 노력한다.
		
		//----------------------------------------------
		
		//배열 변수 선언
		
		int[] arr2; //추천
		int arr3[]; //비추천
		
		int[][] arr4; //추천
		int[] arr5[]; //비추천
		int arr6[][]; //비추천
	
	}
}
