자바(Java)
- 프로그래밍 언어
- 프로그램, Program - 컴퓨터가 수행(실행)해야할 명령어들을 모아놓은 것
- 프로그래밍, Programming - 프로그램을 작성하는 것
- 프로그래밍 언어, Programming Language - 프로그램을 구성하는 명령어의 문법 체계

-어느 수준에 도달하기 전에는 하나의 언어만을 집중할 것. 그렇지 않으면, 병행하는
언어의 개념들이 서로 섞여서 좋지 않은 결과를 불러옴.

컴퓨터에는 자바 언어에 대한 설치가 필요함

자바 다운로드 받기 및 설치

** JDK 11버전 사용

** OpenJDK 11 버전을 다운로드 한다.

- https://jdk.java.net 접속
- ‘JDK 22’(2024년 기준 자바 최신 버전) 링크 클릭
- 왼쪽 ‘Java SE 11’ 클릭
- ‘windows 11/x64 java development kit’ 링크 클릭
- ‘openjdk-11.0.0.1_windows-x64_bin.zip’ 파일 확인
- 압축 해제
- ‘jdk-11.0.0.1’ 폴더 확인
- ‘C:\Program Files\’ 폴더에 ‘Java’ 폴더 생성하기
- ‘C:\Program Files\Java’ 폴더에 ‘jdk-11.0.0.1’ 폴더 복사/붙여넣기

*** 작업중 액세스 거부 확인창 뜨면 ‘계속’눌러서 진행한다.

- 자바 자체는 무료지만(OpenJDK), 자바의 소유주인 오라클은 추가적인 유용한 프로그램을
포함하여 Oracle Java를 만들었고(OpenJDK를 포함하고 있음), 이것은 유료!
- 현업에서는 OpenJDK를 주로 사용한다.
- 2024년 기준 현업에서 사용되는 주요 자바 버전
- 7 - 자바 자체가 처음으로 좋은 언어로 주목받았던 버전, 상당히 오랫동안 사용되었지만
몇몇 버그와 불편한 점이 있었음.
- 8 - 기존 7버전의 버그와 불편점을 개선한 버전으로 10년 넘게 현업에서 사용된 버전이자
자바의 전성기. 현재도 50퍼센트 이상의 점유율을 갖고 있다. 하지만, 2024년 기준으로는
너무 구버전이다보니 다른 API와의 연동에 문제가 있어서 최근에는 버전을 올라가는 경향이 있음.
- 11 - 기존 자바 8버전의 업데이트 버전. 신규 프로젝트는 이 버전으로 만들고 있다.
- 19 - 스타트업에서 공격적으로 도입하는 버전
- 22 - 최신 버전

최근 오라클에서 자바 버전의 업데이트 속도가 많이 빨라져서 자바 8-11버전 이후로 공격적으로
버전이 올라가고 있는 상황이다. 하지만, 개발할 때 무조건 최신버전을 쓰는 것은 버그 문제
때문에 좋지 않다.

자바(Java, JDK) 환경변수 설정하기

- 윈도우 시스템 설정창 열기

(내컴퓨터 창에서 ‘내 PC’항목 우클릭 - 속성 메뉴 선택)

(win키 + pause/break 키)

- 우측 또는 하단에 있는 ‘고급 시스템 설정’ 항목 클릭
- ‘시스템 속성’ 창 확인
- ‘환경 변수’ 단추 클릭
- 시스템 변수를 수정해야 한다.

Path 변수를 편집 또는 더블클릭한다. 이후 기존의 설정들을 절대 건들지 말고(건들면 부팅이
안될 수도 있음), ‘새로 만들기’클릭한다. 만일 기존의 설정을 건들었으면 ‘취소’버튼을
눌러서 나간다.
‘C:\Program Files\Java\jdk-11.0.0.1\bin’를 추가한다.

그다음 아래 쪽 섹션(시스템 변수)에서 ‘새로 만들기’버튼 클릭
변수이름: JAVA_HOME
변수값: C:\Program File\Java\jdk-11.0.0.1
** 변수 값은 ‘디렉터리 찾기’버튼으로 찾으면 편하다.

이후 모든 창을 ‘확인’ 눌러서 닫는다.

Java(JDK) 설치 확인
cmd  실행해서, ‘java -version’, ‘javac -version’ 확인한다.

** 두 명령어 모두 11.0.0.1 버전으로 나오는지 확인. 실제 현업에서는 프로젝트별로 버전이
달라 여러 버전을 사용하기도 하며 버전 관리 툴들이 따로 있다. 하지만, 현재 단계에서는
왠만하면 버전을 맞추자.
** 다른 버전이 나온다면 윈도우 ‘설정 - 앱’에서 ‘Java’, ‘JDK’ 검색하여 삭제할 것
** 또는, 환경변수 Path에서 다른 버전의 JDK, Java 경로를 삭제할 것(주의)

- 콘솔(Console)
- 시스템과 사용자(유저)사이의 상호작용 창(대화창) 또는 기기
- 특정 시스템에 직접적인 명령 또는 신호를 보낼 수 있는 환경
** 윈도우 콘솔(Windows Console)
** 리눅스 콘솔

그래픽 프로그램 - 기본적으로는 콘솔로 동작하는 것을 UI붙여서 동작하도록 만든것.
- 운영체제마다 콘솔 명령어는 외워야 한다(윈도우와 리눅스 명령어가 다름).
- 대학교 컴퓨터공학과에서는 리눅스 서버 세팅까지 4학기 과정으로 배정되어 있다.

윈도우 콘솔 명령어
cls-화면 지우기 (clear screen)
dir-현재 디렉토리 현황 보기 (directory)
cd-디렉토리 이동(change directory)
exit-콘솔 프로그램 종료
- 글자 입력할때 준비된 커서 - 캐럿
맥이나 유닉스, 리눅스에서는 콘솔을 터미널(Terminal)이라 부른다.

JDK, Java Development Kit
- 자바 개발 도구
- 자바 프로그램을 개발하기 위해 자바 언어 해석기(컴파일러, compiler)를 포함하고 있다.
- JDK를 설치하면 JRE도 같이 설치된다.

JRE, Java Runtime Environment
- 자바 실행 환경
- 자바 프로그램을 실행하기 위한 환경(JVM)을 포함하고 있다.
- 자바 프로그램 실행에 필요한 요소(코드)들을 가지고 있다.

이클립스(Eclipse) 툴 프로그램 다운로드
- 자바 개발에 가장 흔히 쓰이는 무료 개발환경(최근에는 인텔리제이(유료)도 상당히 쓰이고
있다.)
- 단점으로는 버그가 많고, 크래시가 종종 발생한다.
- 버전 업데이트가 1년에 4번 정도로 빨라서 현업에서는 안정된 구버전을 많이 사용하고 있다.
- https://eclipseide.org 접속(또는 https://eclipse.org 접속하고 ‘Download Packages'
링크 클릭한다.)
- 최신버전을 쓰지 않고, 대신 Other Packages 버튼 클릭한다.
- 이 강의에서는 2022-12(4.26)버전을 사용하며, 자바 개발자를 위한 Eclipse IDE를 받으면
된다. 나중에 웹개발 할때는 웹개발자를 위한 자바 버전을 새로 받아서 설치할 것이다.
- OS에 맞게 Eclipse 다운받고 다운받은 파일 압축 해제하면 실행된다.
(이클립스는 자바로 개발되어 있으므로, 따로 설치할 필요가 없다.)
- 압축 해제된 ‘eclipse’폴더를 기억하고 확인할 수 있는 폴더로 옮기기(D:\eclipse)
- eclipse.exe 파일 실행
- Browse… 버튼 눌러서 workspace폴더 지정하기(D:\workspace\)
(이때 개발 workspace 폴더는 공백을 포함하지 않는 영어 소문자로만 사용하는 것을 강력하게 권장한다.)

** workspace 폴더 변경은 File 메뉴의 Switch workspace에서 변경한다. 이때는 처음 실행되는
workspace 폴더 지정할 때와는 달리 세팅을 복제할 수 있는 부분이 추가되어 있다. 프로젝트마다
다른 workspace 폴더를 지정하고, 여러 workspace폴더를 왔다 갔다 하면서 이클립스를 사용하기도 한다.

하지만, 프로젝트마다 서로 다른 이클립스를 설치해서 실행함으로 관리의 편의를 도모할 수도 있다.

- 이클립스 글꼴 바꾸기
1. Window메뉴→Preferences 항목 선택
2. 왼쪽 메뉴 중에서 General - Appearance - Colors and Fonts 클릭
3. text font  검색
4. Basic 폴더 항목에 있는 Text font 항목 선택
5. Edit… 버튼 클릭
6. 글꼴을 ‘나눔고딕코딩’으로 설정
7. Apply and Close
- 이클립스 한글 인코딩 설정하기
1. Window메뉴→Preferences 항목 선택
2. 왼쪽 메뉴 중에서 General - Workspace 항목 선택
3. 하단에 text file encoding 확인
4. Other: UTF-8로 변경
5. Apply and Colse

** 최근 버전 이클립스는 기본으로 UTF-8 선택되어 있음

- 한글 인코딩(Encoding)

운영체제가 한글 체계를 인식하고 표현하는 방법

대표적인 한글인식체계

-MS949, EUC-KR, UTF-8

원래 MS949가 최초의 한글 체계였으나, 이후 MS949를 확장시킨 EUC-KR이 나왔고, 요즘에는 전세계 모든
문자들을 포함하고 있는 UTF-8이 나오면서 UTF-8방식을 표준으로 사용한다.
서버 관련 일부 환경에서 인코딩이 깨지는 경우가 있기 때문에, 개발자는 한글인식체계를 고려하여야 한다.
영미권에서는 ISO-8859-1이 기본 언어인식체계이다. 

- 이클립스에 설치된 JDK적용하기
- 이클립스는 자체적인 jre가 포함되어 배포되고 있다. 하지만, 우리가 이전에 설치한 jre와는 버전이
다르므로 바꿔줘야 한다.
1. Window메뉴→Preferences 항목 선택
2. 왼쪽 메뉴 Java - Installed JREs 선택
3. Add.. 버튼 클릭
4. Standard VM 항목 고르고 Next
5. JRE home: 항목에서 Directory… 버튼 클릭
6. 자바가 설치된 폴더 찾아서 폴더 선택(C:\Program Files\Java\jdk-11.0.0.1)
7. Finish
8. 기존 JRE 항목 선택해서 remove
- 이클립스에 적용된 컴파일러 버전 설정하기
1. Window메뉴→Preferences  항목 선택
2. 왼쪽 메뉴 Java→Compiler선택
3. JDK Compliance Level 항목에서 11 선택
4. Apply

** 실제 현업에서 신입사원이 이클립스 설치 세팅을 못해서 문제가 되는 경우가 종종 존재한다.

새 자바 프로젝트 만들기
File→New→Java Project 로 만든다.
(이 때, 단축키 쓸줄알면 많이 편해진다.)
가장 빠른 것은 Ctrl-N 누르고 검색기능 조금 쓰는것이다.

새 자바 프로젝트 만들기 설정
JRE를 project specific JRE - jdk11.0.0.1로 하고, [module-info.java](http://module-info.java)
파일은 만들지 않는다.

자바 프로젝트 지울때 Delete project 체크하면 완전삭제되어 복구불가하니 주의!

자바 프로젝트 만들기
1. File - New - Java Project 선택
2. 프로젝트 이름을 ‘Test’로 작성
3. 적용된 jre버전을 확인한다
4. Finish
5. src폴더 우클릭, New - Package 선택
6. test입력(첫문자 소문자)
7. Finish
8. test 패키지 우클릭, New - Class 선택
9. Test입력(첫문자 대문자)
10. Finish
11. 소스 코드 작성
12. 저장(단축키 ctrl+s) → 이후에 코드나 왼쪽에 빨간줄이나 뭔가 이상한게 있으면 코드에
오류가 있음을 의미한다. 이때 반드시 저장을 해야만 실행할 수 있도록 이클립스의 구조가
만들어져 있다. 만일 저장 안하고 억지로 실행하면, 수정 이전의 코드가 실행되므로 주의!
13. 실행(단축키 ctrl+f11) → 이때 저장 안하면 이상한 메시지가 뜬다.
14. 결과 확인(하단 Console 탭(뷰)에서 문구 확인)

코드는 크게 3부분으로 나눈다
선언 코드
정의 코드
수행 코드

구글에 타닥타닥 검색하여 타닥타닥타자연습 사이트를 북마크 등록하여 시작부터 모든 영타를
키보드를 보지 않고 외워서 칠 수 있도록 연습해야 한다. 그렇지 않으면 수업을 따라가기 힘들다.
이때 암기팁 - 키보드의 울퉁불퉁한 F와 J가 기준이다.
F-왼손 두번째 손가락
J-오른손 두번째 손가락
이후 영어 단어/문장을 키보드 안보고 150타 이상(300타 권장) 만들어놔야만 한다. 여기서 시작된
차이가 하루에만 수십분-수시간 정도 쌓여서 나중에는 수업을 못 따라가는 사태가 벌어지기도 한다.
시간나면 백준 코딩테스트를 틈틈히 풀어보는 것도 도움이 된다.

자바 프로그램 실행(개발) 과정
소스코드  —> 컴파일(compile) —> 바이트코드 —> 실행 —> JVM

.java        compile(JDK)       .class      run     Java Virual Machine

Source Code   번역             Byte Code            자바 가상 머신(JRE)

고급언어(사람)                                      저급언어(컴퓨터)

원시 코드
- 고급언어(Java코드)를 저급언어로 번역하는 과정을 컴파일(Compile)이라고 한다.
- 이클립스는 소스코드를 저장할 때 자동으로 컴파일한다.→ 이클립스 사용할 때는 저장하는
습관을 들이자! 저장 안하면 문제가 있을시 저장 이전 코드 기준으로 실행을 하므로 주의한다!
- 컴파일이 수행될 때 소스코드에 문법 검사도 같이 이루어진다.
- 문법이 맞지 않으면 컴파일하지 않는다.
- 컴파일러(Compiler)가 컴파일(Compile)을 수행한다.

** 자바 컴파일러: javac.exe
- 자바 프로그램을 실행하면 JVM이 바이트코드를 읽어서 실행한다.

** 자바 실행: java.exe

- 구글 검색, 파파고 번역기를 통해 항상 수업내용 이외의 것들을 알아볼 생각을 해야한다. 당장
프로젝트 할때는 수업내용 이외 내용들이 필요하다.
- 실제 개발할 때는 오류 수정에 더 많은 시간을 사용하게 될 것이다. 이때 오류 메시지는 거의
대부분 영어로 되어 있다. 오류 메시지를 번역할 영어실력이 없다면, 번역기를 돌려볼 것!
- 번역 후에도 잘 모르겠다면, 비슷한 오류 메시지가 뜬 케이스를 검색하여 찾아볼 것.

프로그래밍 언어의 분류
- 고급 언어, High Level Language
- 사람이 이해하기 쉬운 형태의 문법으로 이루어져 있다.
- 자연어에 가깝다.
- 컴퓨터가 알아들을 수 있는 언어로 번역이 필요하다(컴파일).

- 저급 언어, Low Level Language
- 기계(컴퓨터)가 이해하기 쉬운 형태의 문법으로 이루어져 있다.
- 기계어, 어셈블리어
- 단순한 명령어 체계
- 최근에는 그나마 어셈블리어 사용하는 분야조차도 자바로 바뀌어 가는 추세에 있다.
- C는 고급언어에 속하지만, 저급언어의 특성을 갖고 있다.

- 소스코드 번역하는 방법
1. 컴파일, Compile
-프로그램 실행하기 전에 미리 전부 번역해놓는 방식
-사전 번역 시간이 많이 필요하다. 요즘은 번역시간이 많이 줄어들었지만, 예전에 컴파일러 성능이
낮을 때는 컴파일에만 몇 시간이 걸리기도 했다.
-프로그램 실행 도중에 번역하는 시간이 필요없다.
-빠른 반응성을 보인다.

2. 인터프리트, Interpret
-프로그램 실행되는 도중에 실행에 필요한 부분을 번역하는 방식
-사전 번역 시간이 필요없다.
-소스코드만 가지고 실행시킬 수 있다. 
-프로그램 실행 도중에 번역하는 시간이 필요하다.
-느린 반응성을 보인다.
자바는 컴파일과 인터프리트를 모두 사용한다. 원래 자바는 인터프리트 언어로서 속도가 느려 외면
받았지만, 이후 성능이 개선되었고, 인터넷의 보급으로 인해 현재 대세 언어가 되었다. 다만, 2024년
현재는 kotlin으로 일부 대체되고 있긴 하다.

3. JIT 컴파일, Just In Time Compile
-인터프리트 방식으로 동작한다.
-한번 번역한 코드를 캐시(Cache, 임시 저장소)에 저장
-최근의 인터프리트 언어들의 경우에는 대부분 JIT컴파일 방식으로 작동된다.
-인터프리트 방식의 단점인 느린 반응성을 개선한 것이다.
** JVM은 JIT컴파일 방식으로 바이트코드를 실행한다. 결론적으로, 자바는 두 번에 걸쳐 컴파일과 인터
프리트를 수행하는 비효율적 구조를 갖고 있다. 이 방법은 자바의 성공요인이자 동시에 자바의 단점이
기도 하다.

- JVM 실행 동작
소스코드 → 바이트코드 → JVM 전달
종종 JVM 내부동작을 물어보는 면접문제가 출제되기도 한다.

개발자의 바이트코드 JVM에 전달
+라이브러리(Library) 코드 로드(load), 바이트코드로 구성
(JRE System Library)
이후 JIT 컴파일

Native Code 완성
(운영체제가 실행할 수 있는 기계어 코드)

최종 실행 코드 완성, 실행
라이브러리 - 어떤 기능단위로 미리 만들어놓은 준비해놓은 코드의 묶음
이때 로드하는 라이브러리 코드는 JVM API